"""
Django settings for tfo_backend project.

Generated by 'django-admin startproject' using Django 4.1.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
import os
import base64
from cryptography.fernet import Fernet
from dotenv import load_dotenv


dotenv_path = r"C:\Users\alimi\TFO\.env"  # Explicit path
load_dotenv(dotenv_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure--nr#q(=+dy7i^cc6r-tt1_k&ah@#94c=zp6&6x77)#8t^42!v@"




DEBUG = True

ALLOWED_HOSTS = ["13.61.220.76","0.0.0.0","localhost","127.0.0.1","smartteams.nypus.in"]
# os.environ["OPENAI_MODEL"] = "gpt-3.5-turbo"
# os.environ["SERPER_API_KEY"] = ""
# os.environ["DATAFORSEO_LOGIN"] = "prasadparit006@gmail.com"
# os.environ["DATAFORSEO_PASSWORD"] = "5f3ea49348b885b0"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "organizations",
    "users",
    "admin_panel",
    "hr_crew",
    "sales_crew",
    "marketing_crew",
    'rest_framework',
    'corsheaders',
    'channels',
     'django_celery_results',
      'django_celery_beat',
]

CORS_ORIGIN_ALLOW_ALL =True  
CORS_ALLOW_CREDENTIALS=True
CORS_ORIGIN_WHITELIST=[
    "http://localhost:9090",  
    "http://localhost:3000",  
    "http://13.61.220.76",
    "https://67b05374f02aa14ef04da956--meek-yeot-a779e9.netlify.app",
    "https://13.61.220.76",
    " https://smartteams.nypus.in"
]
CORS_ORIGIN_REGEX_WHITELIST=[ "http://localhost:5173",
     "http://localhost:9090",  
    "http://localhost:3000",  
    "http://13.61.220.76",
    "https://67b05374f02aa14ef04da956--meek-yeot-a779e9.netlify.app",
     "https://13.61.220.76",
     " https://smartteams.nypus.in"

]

CORS_ALLOWED_ORIGINS = [
    "https://66f56041a5cf651ae57ac743--cute-mandazi-3c71ba.netlify.app",  # Production domain
    "http://localhost:5173",  
    "http://localhost:9090",  
    "http://13.61.220.76",
    "https://67b05374f02aa14ef04da956--meek-yeot-a779e9.netlify.app",
     "https://13.61.220.76",
    " https://smartteams.nypus.in"
]

CSRF_TRUSTED_ORIGINS=["https://66f56041a5cf651ae57ac743--cute-mandazi-3c71ba.netlify.app/"," https://smartteams.nypus.in", "https://13.61.220.76","http://13.61.220.76","https://34.230.50.181","https://kimsat.netlify.app", "http://localhost:3000","http://0.0.0.0:9090","http://localhost:5173","https://67b05374f02aa14ef04da956--meek-yeot-a779e9.netlify.app"]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]

CORS_ALLOWED_HEADERS = [
    'content-type',
    'authorization',
     'x-amz-acl',  # For S3 uploads
]


MIDDLEWARE = [
    "whitenoise.middleware.WhiteNoiseMiddleware", 
    'corsheaders.middleware.CorsMiddleware', 
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "tfo_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [
                    os.path.join(BASE_DIR, "templates"),
                    os.path.join(BASE_DIR, "dist2"),  # Ensure Django finds dist2
                ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI_APPLICATION = "tfo_backend.wsgi.application"


ASGI_APPLICATION = 'tfo_backend.asgi.application'  # Replace 'your_project_name' with your project's name
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],  # Redis should be running locally
        },
    },
}

CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis as the broker
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Redis as the result backend
CELERY_RESULT_BACKEND = 'django-db'
CELERY_TASK_SOFT_TIME_LIMIT = 300  # Warns the task before being killed
CELERY_TASK_TIME_LIMIT = 500       # Hard kill if it exceeds 5 seconds
CELERY_TASK_ACKS_LATE = True

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'tfo',
        'USER': 'postgres',
        'PASSWORD': 'alimirsa1',
        'HOST': 'localhost',  
        'PORT': '5432',
        'CONN_MAX_AGE': 0,           
    }
}
SITE_URL = "https://smartteams.nypus.in"


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}
# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = 'users.User'
from datetime import timedelta


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=365 * 10), 
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ALGORITHM': 'HS256',  # Match this with your token generation algorithm
    'SIGNING_KEY': 'r1t22rSDO1d8df80ASDF23adf90fafe304fa123987dads',
    'AUTH_HEADER_TYPES': ('Bearer',),  # Ensure the header uses 'Bearer'
}

ORGANIZATION_JWT_SETTINGS = {
     'ACCESS_TOKEN_LIFETIME': timedelta(days=365 * 10), 
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'r1t22rSDO1d8df80ASDF23adf90fafe304fa123987dads',
    'AUTH_HEADER_TYPES': ('Bearer',),
}



# sales stratergy 9
# customer relationship 8
# social media 7
# content creation sales 6
# Lead generation 5
# Marketing research 4
# Seo 3

EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))  # Convert to int
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"  # Convert to boolean
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")
print(EMAIL_HOST_USER,EMAIL_HOST_PASSWORD,DEFAULT_FROM_EMAIL)
print("EMAIL_HOST_USER:", os.getenv("EMAIL_HOST_USER"))
print("EMAIL_HOST_USER from env:", os.getenv("EMAIL_HOST_USER"))